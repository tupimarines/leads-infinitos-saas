#!/usr/bin/env python3
"""
Script para criar licen√ßas vital√≠cias para todos os usu√°rios existentes
Execute este script uma vez para migrar usu√°rios antigos
"""

import sqlite3
import os
from datetime import datetime, timedelta

def get_db_connection():
    db_path = os.path.join(os.getcwd(), "app.db")
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    return conn

def create_lifetime_licenses():
    """Cria licen√ßas vital√≠cias para todos os usu√°rios existentes"""
    conn = get_db_connection()
    
    try:
        # Buscar todos os usu√°rios
        users = conn.execute("SELECT id, email FROM users").fetchall()
        
        if not users:
            print("‚ùå Nenhum usu√°rio encontrado na base de dados.")
            return False
        
        print(f"üìã Encontrados {len(users)} usu√°rios na base de dados.")
        
        # Para cada usu√°rio, verificar se j√° tem licen√ßa
        licenses_created = 0
        for user in users:
            # Verificar se j√° existe licen√ßa para este usu√°rio
            existing_license = conn.execute(
                "SELECT id FROM licenses WHERE user_id = ?", 
                (user['id'],)
            ).fetchone()
            
            if existing_license:
                print(f"‚ö†Ô∏è  Usu√°rio {user['email']} j√° possui licen√ßa. Pulando...")
                continue
            
            # Criar licen√ßa vital√≠cia (expira em 50 anos)
            expires_at = datetime.now() + timedelta(days=365*50)
            
            conn.execute(
                """
                INSERT INTO licenses 
                (user_id, hotmart_purchase_id, hotmart_product_id, license_type, purchase_date, expires_at)
                VALUES (?, ?, ?, ?, ?, ?)
                """,
                (
                    user['id'],
                    f"LIFETIME-{user['id']}-{datetime.now().strftime('%Y%m%d')}",
                    '5974664',
                    'anual',  # Tipo anual mas com expira√ß√£o muito longa
                    datetime.now().isoformat(),
                    expires_at.isoformat()
                )
            )
            
            licenses_created += 1
            print(f"‚úÖ Licen√ßa vital√≠cia criada para {user['email']}")
        
        conn.commit()
        print(f"\nüéâ Processo conclu√≠do!")
        print(f"üìä Licen√ßas criadas: {licenses_created}")
        print(f"üìä Usu√°rios processados: {len(users)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar licen√ßas: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()

def main():
    print("=" * 60)
    print("CRIA√á√ÉO DE LICEN√áAS VITAL√çCIAS")
    print("=" * 60)
    print("Este script criar√° licen√ßas vital√≠cias para todos os usu√°rios existentes.")
    print("‚ö†Ô∏è  ATEN√á√ÉO: Execute apenas uma vez!")
    print()
    
    # Verificar se o banco existe
    db_path = os.path.join(os.getcwd(), "app.db")
    if not os.path.exists(db_path):
        print("‚ùå Banco de dados n√£o encontrado. Execute o app.py primeiro.")
        return
    
    # Confirmar execu√ß√£o
    response = input("Deseja continuar? (s/N): ").strip().lower()
    if response not in ['s', 'sim', 'y', 'yes']:
        print("‚ùå Opera√ß√£o cancelada.")
        return
    
    print("\nüîÑ Criando licen√ßas vital√≠cias...")
    
    if create_lifetime_licenses():
        print("\n‚úÖ Migra√ß√£o conclu√≠da com sucesso!")
        print("\nPr√≥ximos passos:")
        print("1. Teste o login com um usu√°rio existente")
        print("2. Verifique se a licen√ßa aparece em /licenses")
        print("3. Teste se consegue usar o scraper")
    else:
        print("\n‚ùå Falha na migra√ß√£o.")

if __name__ == "__main__":
    main()
